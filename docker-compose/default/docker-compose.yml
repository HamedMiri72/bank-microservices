services:
    read:
      image: grafana/loki:latest
      command: "-config.file=/etc/loki/config.yaml -target=read"
      ports:
        - 3101:3100
        - 7946
        - 9095
      volumes:
        - ../observability/loki/loki-config.yml:/etc/loki/config.yaml
      depends_on:
        - minio
      healthcheck:
        test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
        interval: 10s
        timeout: 5s
        retries: 5
      networks: &loki-dns
        bank-microservice:
          aliases:
            - loki

    write:
      image: grafana/loki:latest
      command: "-config.file=/etc/loki/config.yaml -target=write"
      ports:
        - 3102:3100
        - 7946
        - 9095
      volumes:
        - ../observability/loki/loki-config.yml:/etc/loki/config.yaml
      healthcheck:
        test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
        interval: 10s
        timeout: 5s
        retries: 5
      depends_on:
        - minio
      networks:
        <<: *loki-dns

    alloy:
      image: grafana/alloy:latest
      volumes:
        - ../observability/alloy/alloy-local-config.yml:/etc/alloy/config.alloy:ro
        - /var/run/docker.sock:/var/run/docker.sock
      command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
      ports:
        - 12345:12345
      depends_on:
        - gateway
      networks:
        - bank-microservice

    minio:
      image: minio/minio
      entrypoint:
        - sh
        - -euc
        - |
          mkdir -p /data/loki-data && \
          mkdir -p /data/loki-ruler && \
          minio server /data
      environment:
        - MINIO_ROOT_USER=loki
        - MINIO_ROOT_PASSWORD=supersecret
        - MINIO_PROMETHEUS_AUTH_TYPE=public
        - MINIO_UPDATE=off
      ports:
        - 9000
      volumes:
        - ./.data/minio:/data
      healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
        interval: 15s
        timeout: 20s
        retries: 5
      networks:
        - bank-microservice

    grafana:
      image: grafana/grafana:latest
      environment:
        - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
        - GF_AUTH_ANONYMOUS_ENABLED=true
        - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      depends_on:
        - gateway
      entrypoint:
        - sh
        - -euc
        - |
          mkdir -p /etc/grafana/provisioning/datasources
          cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
          apiVersion: 1
          datasources:
            - name: Loki
              type: loki
              access: proxy
              url: http://gateway:3100
              jsonData:
                httpHeaderName1: "X-Scope-OrgID"
              secureJsonData:
                httpHeaderValue1: "tenant1"
          EOF
          /run.sh
      ports:
        - "3000:3000"
      healthcheck:
        test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
        interval: 10s
        timeout: 5s
        retries: 5
      networks:
        - bank-microservice

    backend:
      image: grafana/loki:latest
      volumes:
        - ../observability/loki/loki-config.yml:/etc/loki/config.yaml
      ports:
        - "3100"
        - "7946"
      command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
      depends_on:
        - gateway
      networks:
        - bank-microservice


    gateway:
      image: nginx:latest
      depends_on:
        - read
        - write
      entrypoint:
        - sh
        - -euc
        - |
          cat <<EOF > /etc/nginx/nginx.conf
          user  nginx;
          worker_processes  5;  ## Default: 1

          events {
            worker_connections   1000;
          }

          http {
            resolver 127.0.0.11;

            server {
              listen             3100;

              location = / {
                return 200 'OK';
                auth_basic off;
              }

              location = /api/prom/push {
                proxy_pass       http://write:3100\$$request_uri;
              }

              location = /api/prom/tail {
                proxy_pass       http://read:3100\$$request_uri;
                proxy_set_header Upgrade \$$http_upgrade;
                proxy_set_header Connection "upgrade";
              }

              location ~ /api/prom/.* {
                proxy_pass       http://read:3100\$$request_uri;
              }

              location = /loki/api/v1/push {
                proxy_pass       http://write:3100\$$request_uri;
              }

              location = /loki/api/v1/tail {
                proxy_pass       http://read:3100\$$request_uri;
                proxy_set_header Upgrade \$$http_upgrade;
                proxy_set_header Connection "upgrade";
              }

              location ~ /loki/api/.* {
                proxy_pass       http://read:3100\$$request_uri;
              }
            }
          }
          EOF
          /docker-entrypoint.sh nginx -g "daemon off;"
      ports:
        - "3100:3100"
      healthcheck:
        test: [ "CMD", "service", "nginx", "status" ]
        interval: 10s
        timeout: 5s
        retries: 5
      networks:
        - bank-microservice
#    accountsdb:
#      image: mysql
#      container_name: accountsdb
#      ports:
#        - "3305:3306"
#      healthcheck:
#        test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
#        interval: 10s
#        timeout: 10s
#        retries: 10
#        start_period: 10s
#      environment:
#        MYSQL_ROOT_PASSWORD: root
#        MYSQL_DATABASE: accountsdb
#      networks:
#        - bank-microservice
#
#    cardsdb:
#      image: mysql
#      container_name: cardsdb
#      ports:
#        - "3304:3306"
#      healthcheck:
#        test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
#        interval: 10s
#        timeout: 10s
#        retries: 10
#        start_period: 10s
#      environment:
#        MYSQL_ROOT_PASSWORD: root
#        MYSQL_DATABASE: cardsdb
#      networks:
#        - bank-microservice
#
#    loansdb:
#      image: mysql
#      container_name: loansdb
#      ports:
#        - "3303:3306"
#      healthcheck:
#        test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
#        interval: 10s
#        timeout: 10s
#        retries: 10
#        start_period: 10s
#      environment:
#        MYSQL_ROOT_PASSWORD: root
#        MYSQL_DATABASE: loansdb
#      networks:
#        - bank-microservice

    configserver:
      image: "hamedmiri72/configserver:s11"
      container_name: configserver-ms
      ports:
        - "8071:8071"
      healthcheck:
        test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
        interval: 10s
        timeout: 5s
        retries: 10
        start_period: 10s
      deploy:
        resources:
          limits:
            memory: "700m"
      networks:
        - bank-microservice

    eurekaserver:
      image: "hamedmiri72/eurekaserver:s11"
      container_name: eurekaserver-ms
      ports:
        - "8070:8070"
      healthcheck:
        test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
        interval: 10s
        timeout: 5s
        retries: 10
        start_period: 10s
      deploy:
        resources:
          limits:
            memory: "700m"
      networks:
        - bank-microservice
      depends_on:
        configserver:
          condition: service_healthy
      environment:
        SPRING_APPLICATION_NAME: "eurekaserver"
        SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071"

    accounts:
      image: "hamedmiri72/accounts:s11"
      container_name: accounts-ms
      ports:
        - "8080:8080"
      healthcheck:
        test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
        interval: 10s
        timeout: 5s
        retries: 10
        start_period: 10s

      depends_on:
        configserver:
          condition: service_healthy
        eurekaserver:
          condition: service_healthy
#        accountsdb:
#          condition: service_healthy
      deploy:
        resources:
          limits:
            memory: "700m"
      networks:
        - bank-microservice
      environment:
        SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071"
        EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka"
        SPRING_PROFILES_ACTIVE: default
        SPRING_APPLICATION_NAME: "accounts"
#        SPRING_DATASOURCE_URL: "jdbc:mysql://accountsdb:3305/accountsdb"


    cards:
      image: "hamedmiri72/cards:s11"
      container_name: cards-ms
      ports:
        - "9000:9000"
      healthcheck:
        test: "curl --fail --silent localhost:9000/actuator/health/readiness | grep UP || exit 1"
        interval: 10s
        timeout: 5s
        retries: 10
        start_period: 10s
      depends_on:
        configserver:
          condition: service_healthy
        eurekaserver:
          condition: service_healthy
#        cardsdb:
#          condition: service_healthy
      deploy:
        resources:
          limits:
            memory: "700m"
      networks:
        - bank-microservice
      environment:
        SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071"
        EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka"
        SPRING_PROFILES_ACTIVE: default
        SPRING_APPLICATION_NAME: "cards"
#        SPRING_DATASOURCE_URL: "jdbc:mysql://cardsdb:3305/cardsdb"

    loans:
      image: "hamedmiri72/loans:s11"
      container_name: loans-ms
      ports:
        - "8090:8090"
      healthcheck:
        test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1"
        interval: 10s
        timeout: 5s
        retries: 10
        start_period: 10s
      depends_on:
        configserver:
          condition: service_healthy
        eurekaserver:
          condition: service_healthy
#        loansdb:
#          condition: service_healthy
      deploy:
        resources:
          limits:
            memory: "700m"
      networks:
        - bank-microservice
      environment:
        SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071"
        EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka"
        SPRING_PROFILES_ACTIVE: default
        SPRING_APPLICATION_NAME: "loans"
#        SPRING_DATASOURCE_URL: "jdbc:mysql://loansdb:3305/loansdb"

#    loans1:
#      image: "hamedmiri72/loans:s9"
#      container_name: loans-ms1
#      ports:
#        - "8091:8090"
#      depends_on:
#        configserver:
#          condition: service_healthy
#        eurekaserver:
#          condition: service_healthy
#      #        loansdb:
#      #          condition: service_healthy
#      deploy:
#        resources:
#          limits:
#            memory: "700m"
#      networks:
#        - bank-microservice
#      environment:
#        SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071"
#        EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka"
#        SPRING_PROFILES_ACTIVE: default
#        SPRING_APPLICATION_NAME: "loans"
#  #        SPRING_DATASOURCE_URL: "jdbc:mysql://loansdb:3305/loansdb"

    gatewayserver:
      image: "hamedmiri72/gatewayserver:s11"
      container_name: gateway-ms
      ports:
        - "8072:8072"
      depends_on:
        configserver:
          condition: service_healthy
        eurekaserver:
          condition: service_healthy
        accounts:
          condition: service_healthy
        loans:
          condition: service_healthy
        cards:
          condition: service_healthy
      #        loansdb:
      #          condition: service_healthy
      deploy:
        resources:
          limits:
            memory: "700m"
      networks:
        - bank-microservice
      environment:
        SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071"
        EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka"
        SPRING_APPLICATION_NAME: "gatewayserver"
  #        SPRING_DATASOURCE_URL: "jdbc:mysql://loansdb:3305/loansdb"





networks:
  bank-microservice:
    driver: bridge


